---
name: Build and Deploy to Docker Hub

"on":
  push:
    branches: ["dev"]
  pull_request:
    branches: ["main"]
    types: ["opened", "synchronize", "reopened", "closed"]

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write

jobs:
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yamllint
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint
      - name: Run yamllint
        run: |
          yamllint -d '{extends: default, rules: {line-length: {max: 140}}}' . || echo "yamllint warnings captured"

  build-and-deploy:
    if: >
      github.event_name == 'push' ||
      (github.event.action == 'closed' &&
      github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify required files
        run: |
          echo "Verifying required files..."
          # Check for essential files
          required_files=("Dockerfile" "requirements.txt" "app.py" "House_dataset.csv")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file is missing!"
              exit 1
            fi
          done
          echo "All required files are present."

      - name: Verify required secrets
        run: |
          echo "Verifying required secrets..."
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "Error: DOCKER_HUB_USERNAME secret is not set!"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
            echo "Error: DOCKER_HUB_ACCESS_TOKEN secret is not set!"
            exit 1
          fi
          echo "All required secrets are configured."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/dev' }}

      - name: Build and test Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: test-image:latest
          cache-from: type=gha

      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          docker run --rm -d --name test-container \
            -p 5000:5000 test-image:latest

          # Wait for application to start
          sleep 25

          # Test health endpoint with retry
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt..."
            if curl -f --max-time 10 http://localhost:5000/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, retrying..."
              sleep 5
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "Error: Health check failed after $max_attempts attempts"
            docker stop test-container || true
            exit 1
          fi

          # Verify model is loaded in health response
          health_response=$(curl -s --max-time 10 http://localhost:5000/health)
          if [[ $health_response != *"model_loaded"* ]]; then
            echo "Error: Model not loaded properly"
            docker stop test-container || true
            exit 1
          fi
          echo "Model loading verified!"

          # Optionally test root endpoint but don't fail the build on this
          if curl -f --max-time 10 http://localhost:5000/; then
            echo "Root endpoint test passed!"
          else
            echo "Warning: Root endpoint check failed, but health is OK. Proceeding."
          fi

          # Clean up
          docker stop test-container || true
          echo "Docker image test passed!"

      - name: Build and push Docker image

        id: build-and-push
        uses: docker/build-push-action@v6

        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run vulnerability scan on pushed image by digest (Trivy via Docker)
        run: |
          docker pull aquasec/trivy:0.56.2
          docker run --rm \
            -v "$PWD:/work" \
            aquasec/trivy:0.56.2 image \
            --scanners vuln,secret \
            --ignore-unfixed \
            --format sarif \
            --output /work/trivy-results.sarif \
            --timeout 10m \
            "${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction@${{ steps.build-and-push.outputs.digest }}"

      - name: Upload Trivy image scan results to GitHub Security tab

        uses: github/codeql-action/upload-sarif@v3

        if: always() && github.event_name != 'pull_request' && hashFiles('trivy-results.sarif') != ''

        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-image"

      - name: Run config and secret scan on repository (Trivy via Docker)

        run: |
          docker pull aquasec/trivy:0.56.2
          docker run --rm \
            -v "$PWD:/work" \
            aquasec/trivy:0.56.2 fs \
            --scanners secret,misconfig \
            --format sarif \
            --output /work/trivy-results-config.sarif \
            --timeout 10m \
            /work

      - name: Upload Trivy config/secret scan results to GitHub Security tab

        uses: github/codeql-action/upload-sarif@v3

        if: always() && github.event_name != 'pull_request' && hashFiles('trivy-results-config.sarif') != ''

        with:
          sarif_file: "trivy-results-config.sarif"

          category: "trivy-config-build"

      - name: Deploy notification

        if: success()
        run: |
          echo "Docker image successfully built and pushed!"
          echo "Image: ${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction:latest"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  send-notification:
    needs: ["build-and-deploy"]
    runs-on: ubuntu-latest
    if: always() && needs.build-and-deploy.result != 'skipped'

    steps:
      - name: Send Simple Notification
        run: |
          STATUS="${{ needs.build-and-deploy.result }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          WORKFLOW_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

          if [ "$STATUS" = "success" ]; then
            MESSAGE="SUCCESS: CI/CD Pipeline completed successfully!"
            MESSAGE="$MESSAGE\n\nRepository: $REPO"
            MESSAGE="$MESSAGE\nBranch: $BRANCH"
            MESSAGE="$MESSAGE\nCommit: $COMMIT"
            MESSAGE="$MESSAGE\nDocker Image: ${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction:latest"
            MESSAGE="$MESSAGE\n\nView Details: $WORKFLOW_URL"
            MESSAGE="$MESSAGE\n\nThe application has been successfully "
            MESSAGE="${MESSAGE}deployed to Docker Hub!"
          else
            MESSAGE="FAILED: CI/CD Pipeline failed!"
            MESSAGE="$MESSAGE\n\nRepository: $REPO"
            MESSAGE="$MESSAGE\nBranch: $BRANCH"
            MESSAGE="$MESSAGE\nCommit: $COMMIT"
            MESSAGE="$MESSAGE\n\nView Details: $WORKFLOW_URL"
            MESSAGE="$MESSAGE\n\nPlease check the workflow logs for "
            MESSAGE="${MESSAGE}error details."
          fi

          echo -e "$MESSAGE"
          echo "::notice::$MESSAGE"

  create-github-issue:
    needs: ["build-and-deploy"]
    runs-on: ubuntu-latest
    if: always() && needs.build-and-deploy.result != 'skipped'

    steps:
      - name: Create GitHub Issue for Pipeline Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ needs.build-and-deploy.result }}';
            const statusEmoji = status === 'success' ? '' : '';
            const title = `CI/CD Pipeline ${status.toUpperCase()} - ${
              new Date().toISOString().split('T')[0]}`;
            const timestamp = new Date().toISOString();

            const body = [
              '## ' + statusEmoji + ' CI/CD Pipeline Execution Report',
              '',
              '| Field | Value |',
              '|-------|-------|',
              '| **Repository** | `' + '${{ github.repository }}' + '` |',
              '| **Branch** | `' + '${{ github.ref_name }}' + '` |',
              '| **Commit** | `' + '${{ github.sha }}' + '` |',
              '| **Status** | **' + status.toUpperCase() + '** |',
              '| **Workflow** | [View Details] |',
              '| **Timestamp** | `' + timestamp + '` |',
              '',
              '### Result Details',
              status === 'success'
                ? 'Success! The application has been successfully ' +
                  'built and deployed to Docker Hub!'
                : 'Failed! The build process encountered an error. ' +
                  'Please check the logs for details.',
              '',
              '### Docker Hub',
              status === 'success'
                ? 'The new image has been pushed to: `' + '${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction:latest' + '`'
                : 'Docker deployment was not completed due to build failure.',
              '',
              '---',
              '',
              'Note for Administrator (@Rayyan9477): This issue was ',
              'automatically created to notify the administrator of the CI/CD ',
              'pipeline status as per project requirements.',
              'You can close this issue once you\'ve reviewed the deployment ',
              'results.',
              '',
              'This is an automated notification from GitHub Actions CI/CD ',
              'pipeline.'
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: [
                'ci-cd',
                'automation',
                status === 'success'
                  ? 'deployment-success'
                  : 'deployment-failed'
              ],
              assignees: ['Rayyan9477']
            });

      - name: Create Summary Report
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | \`${{ github.repository }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | **${{ needs.build-and-deploy.result }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Timestamp | \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "Success! The application has been successfully built and deployed to Docker Hub!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Docker Image: \`${{ secrets.DOCKER_HUB_USERNAME }}/house-price-prediction:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Failed! The build process encountered an error. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View Full Workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Notification: GitHub issue created with deployment status." >> $GITHUB_STEP_SUMMARY

  security-scan:
    if: >
      github.event_name == 'pull_request' && github.event.action != 'closed' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/dev')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run config and secret scan on repository (Trivy via Docker)

        run: |
          docker pull aquasec/trivy:0.56.2
          docker run --rm \
            -v "$PWD:/work" \
            aquasec/trivy:0.56.2 fs \
            --scanners secret,misconfig \
            --format sarif \
            --output /work/trivy-results-config.sarif \
            --timeout 10m \
            /work

      - name: Upload Trivy config/secret scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results-config.sarif') != ''
        with:
          sarif_file: "trivy-results-config.sarif"
          category: "trivy-config-security-scan"
