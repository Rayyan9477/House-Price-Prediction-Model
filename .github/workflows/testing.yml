name: Automated Testing

on:
  pull_request:
    branches: [ test ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ test ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html

    - name: Test Flask app startup
      run: |
        python -c "from app import app; print('Flask app imports successfully')"

    - name: Test API endpoints
      run: |
        python -m pytest tests/test_app.py::TestHousePricePredictionAPI::test_health_endpoint -v
        python -m pytest tests/test_app.py::TestHousePricePredictionAPI::test_home_endpoint -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { exec } = require('child_process');
          const fs = require('fs');

          // Get test results
          let testResults = '';
          try {
            const coverageData = fs.readFileSync('./coverage.xml', 'utf8');
            // Simple parsing for demonstration - you might want to use a proper XML parser
            const lines = coverageData.split('\n');
            const coverageLine = lines.find(line => line.includes('line-rate'));
            const coverage = coverageLine ? coverageLine.match(/line-rate="([^"]*)"/)[1] : 'unknown';
            testResults = `Coverage: ${(parseFloat(coverage) * 100).toFixed(2)}%`;
          } catch (error) {
            testResults = 'Coverage report not available';
          }

          const comment = `
          ## ðŸ§ª Automated Testing Results

          âœ… **Tests completed successfully!**

          ### Test Summary
          - **Status**: âœ… Passed
          - **Coverage**: ${testResults}
          - **Python Version**: ${{ matrix.python-version }}
          - **Branch**: \`${{ github.head_ref }}\` â†’ \`${{ github.base_ref }}\`

          ### Test Details
          - Unit tests executed
          - Flask app startup verified
          - API endpoints tested
          - Coverage report generated

          ### Next Steps
          Once this PR is merged to the \`test\` branch, it will trigger the deployment workflow for the \`main\` branch.

          *Automated comment from CI/CD pipeline*
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });