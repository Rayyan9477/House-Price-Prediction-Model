name: Code Quality Check

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # check code quality with more relaxed settings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E501,W503,E203

    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Security scan completed"
          cat bandit-report.json
        fi

    - name: Comment PR with code quality results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const comment = `
          ## üîç Code Quality Check Results

          ‚úÖ **Code quality checks completed!**

          ### Quality Checks Performed
          - **Flake8 Linting**: Syntax and style validation
          - **Security Scan**: Bandit security analysis
          - **Complexity Check**: Code complexity analysis

          ### Results
          - **Status**: ‚úÖ Passed
          - **Branch**: \`${{ github.head_ref }}\` ‚Üí \`${{ github.base_ref }}\`

          ### Next Steps
          1. Review any linting suggestions
          2. Address security vulnerabilities if found
          3. Once approved, this PR can be merged to trigger testing on the \`test\` branch

          *Automated comment from CI/CD pipeline*
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });